{"version":3,"sources":["serviceWorker.js","Compiler/Compiler.js","Editor/Editor.jsx","Header/Header.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Compiler","Code","status","cta","y","length","Check","stat","Value","Errors","push","loop","inloop","safeloop","tape","Array","fill","ptr","loopStack","i","console","log","char","prompt","charCodeAt","String","fromCharCode","pop","require","Editor","props","runCode","v","state","outputText","s","setState","actCode","Container","Row","Col","class","value","options","mode","theme","lineNumbers","scrollbarStyle","onChange","editor","data","this","lineSeparator","readOnly","Button","onClick","Component","Header","Jumbotron","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aaf0ce95.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nfunction Check(Code){\n    var cta = 0;\n    for(var y = 0; y < Code.length;y++){\n        if ( Code[y] === '['){\n            //if( y + 1 < Code.Length){\n                if(Code[y + 1] ===']'){\n                    return 2;\n                }\n            //}\n            cta+=1;\n        }\n        if( Code[y] === ']' ) {\n            if( cta <= 0){\n                return 1;\n            }\n            cta -=1;\n        }\n    }\n    if( cta > 0)\n        return 1;\n    return 3;\n}\n\n\nexport function Compiler(Code){\n    let status = Check(Code);\n    let stat = {\n    Value : \"\",\n    Errors: []\n}\n\n    if(status === 1){\n    stat.Errors.push(\"UNBALANCED BRACKETS\")\n        return stat;\n    }\n    if(status === 2){\n        stat.Errors.push(\"ENCLOSED BRACKETS\")\n        return stat;\n    }\n    var    loop       =  false;\n    var    inloop     =  0;\n    const  MAXN       =  10000;\n    let    safeloop   =  0;\n    let    tape       =  Array(1000).fill(0);\n    let    ptr        =  0;\n    let    loopStack  =  [];\n\n  for( let i = 0; i < Code.length; i++ ) {\n   safeloop++;\n        if( safeloop > MAXN){\n            console.log(stat)\n            stat.Errors.push(\"RANGE ERROR\");\n            return stat;\n        }\n\n  const char = Code[i];\n\n    if(loop) {\n      if(char === \"[\") inloop++;\n        if(char === \"]\") {\n          if(inloop === 0) loop = false;\n          else inloop--;\n        }\n      continue;\n    }\n    \n    switch(char){\n      case '+':\n        tape[ptr]++;\n        break;\n      case '-':\n        tape[ptr]--;\n        break;\n      case ',':\n        tape[ptr] = prompt(\"Input\")[0].charCodeAt()\n        break;\n      case '.':\n        console.log(String.fromCharCode(tape[ptr]));\n            if(tape[ptr] >= 33 && tape[ptr] <= 126)\n                stat.Value += String.fromCharCode(tape[ptr]);\n            else\n                stat.Value += String(tape[ptr]);\n        break;\n        case '>':\n        ptr++;\n        tape[ptr] = tape[ptr] || 0;\n        break;\n      case '<':\n        ptr--;\n        tape[ptr] = tape[ptr] || 0;\n        break;\n      case '[':\n        tape[ptr] === 0 ? loop = true: loopStack.push(i);\n        break;\n      case ']':\n        tape[ptr] !== 0 ? i = loopStack[loopStack.length-1]: loopStack.pop();\n        break;\n      default:\n        break;\n      }\n    }\n    console.log(stat);\n    return stat;\n}\nexport default Compiler;\n\n\n\n","import React, { Component } from \"react\";\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Button from 'react-bootstrap/Button'\nimport Container from 'react-bootstrap/Container'\nimport {UnControlled as CodeMirror} from 'react-codemirror2'\nimport {Compiler}from '../Compiler/Compiler'\nimport './editor-style.css'\nrequire('codemirror/mode/brainfuck/brainfuck');\nrequire('codemirror/lib/codemirror.css');\nrequire('codemirror/theme/elegant.css');\nrequire('codemirror/theme/zenburn.css');\nconst theme = 'zenburn';\nclass Editor extends Component{   \n    constructor(props) {\n    super(props)\n    this.state = {\n      runCode: false,\n      outputText: '.',\n      actCode : ' '\n    }\n  }\n  runCode = () => {\n       let v = Compiler(this.state.outputText);\n      let s = \"\"\n      if(v.Errors.length > 0)\n            for(let y = 0;y < v.Errors.length;y++){\n              s += v.Errors[y];\n              s+= '\\0';\n        }else{\n            s = v.Value;\n        }\n      console.log(s)\n      //  let s = JSON.stringify(v);\n\n      this.setState({actCode:s})\n  }\n    render(){\n    return  (\n    <Container>\n        <Row>\n            <Col>\n                <h3 class = \"other\"><center>Let's Code something</center></h3>\n            </Col>\n            <Col>\n                <h3 class =\"other\"><center>Output</center></h3>\n            </Col>\n        </Row>\n        <Row>\n        <Col >\n        <CodeMirror\n            value = '+++.'\n            options={{\n                mode: 'brainfuck',\n                theme:theme,\n                lineNumbers: true,\n                scrollbarStyle: \"native\"\n            }}\n            onChange={(editor, data, value) => {\n                this.setState({\n              runCode: false,\n              outputText: value,\n            })\n          }}\n        />\n        </Col>\n        <Col >\n            {/*       <div className=\"Output\">\n          {this.state.actCode }</pre>\n        </div>*/}\n            <CodeMirror\n                value = {this.state.actCode}\n            options={{\n                mode: 'brainfuck',\n                theme:'elegant',\n                lineSeparator:'\\0',\n                lineNumbers: true,\n                readOnly:true\n            }}\n            /> \n        </Col>\n        </Row>\n\n            <Row>\n        <Col>\n            <br></br>\n            <center><Button onClick={this.runCode}>run code</Button></center>\n        </Col>\n            </Row>\n    </Container>\n\n   )\n    }\n}\nexport default Editor;\n\n\n","import React from \"react\";\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Container from 'react-bootstrap/Container'\nimport './header-style.css'\n\n\nfunction Header(props){\n        //const Head = () =>{    \n       return(\n           <Container>\n        <Jumbotron>\n            <Container>\n                <Row>\n                    <Col>\n                    <h3 class= \"other\">Compiler of </h3>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <center><h1 class=\"bit\">BRAINF*CK</h1></center>\n                    </Col>\n                </Row>\n            </Container>\n        </Jumbotron>\n           </Container>\n       )\n}\nexport default Header;\n","import\"../node_modules/bootstrap/dist/css/bootstrap.min.css\"; \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Container from 'react-bootstrap/Container'\nimport Editor from './Editor/Editor'\nimport Header from './Header/Header'\nReactDOM.render(\n  <React.StrictMode>\n      <body>\n      <Container>\n          <Header/>\n          <Editor></Editor>\n    </Container>\n      </body>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}